import java.io.*;
import org.codehaus.plexus.util.FileUtils;
import java.util.regex.*;

try
{
    File file = new File( basedir, "pom.xml" );

    BufferedReader in = new BufferedReader( new InputStreamReader( new FileInputStream( file ), "UTF-8" ) );
    StringBuilder buf = new StringBuilder();
    String line = in.readLine();
    while ( line != null )
    {
        buf.append( line );
        buf.append( " " );
        line = in.readLine();
    }

    Pattern p = Pattern.compile( "\\Q<version>\\E\\s*1\\.2\\.1-SNAPSHOT\\s*\\Q</version>\\E" );
    Matcher m = p.matcher( buf.toString() );
    if ( !m.find() )
    {
        System.out.println( "Did not set new version in parent pom" );
        return false;
    }

    file = new File( basedir, "module-a1/pom.xml" );

    in = new BufferedReader( new InputStreamReader( new FileInputStream( file ), "UTF-8" ) );
    buf = new StringBuilder();
    line = in.readLine();
    while ( line != null )
    {
        buf.append( line );
        buf.append( " " );
        line = in.readLine();
    }

    p = Pattern.compile( "\\Q<parent>\\E.*\\Q<version>\\E\\s*1\\.2\\.1-SNAPSHOT\\s*\\Q</version>\\E.*\\Q</parent>\\E" );
    m = p.matcher( buf.toString() );
    if ( !m.find() )
    {
        System.out.println( "Did not update parent version in module-a1/pom" );
        return false;
    }
    p = Pattern.compile( "\\Q</parent>\\E.*\\Q<version>\\E\\s*2\\.0\\.7-SNAPSHOT\\s*\\Q</version>\\E" );
    m = p.matcher( buf.toString() );
    if ( !m.find() )
    {
        System.out.println( "Did update child version in module-a1/pom" );
        return false;
    }

    file = new File( basedir, "module-a2/pom.xml" );

    in = new BufferedReader( new InputStreamReader( new FileInputStream( file ), "UTF-8" ) );
    buf = new StringBuilder();
    line = in.readLine();
    while ( line != null )
    {
        buf.append( line );
        buf.append( " " );
        line = in.readLine();
    }

    p = Pattern.compile( "\\Q<parent>\\E.*\\Q<version>\\E\\s*1\\.2\\.1-SNAPSHOT\\s*\\Q</version>\\E.*\\Q</parent>\\E" );
    m = p.matcher( buf.toString() );
    if ( !m.find() )
    {
        System.out.println( "Did not update parent version in module-a2/pom" );
        return false;
    }
    p = Pattern.compile( "\\Q</parent>\\E.*\\Q<version>\\E\\s*1\\.2\\.1-SNAPSHOT\\s*\\Q</version>\\E" );
    m = p.matcher( buf.toString() );
    if ( m.find() )
    {
        System.out.println( "Did update child version in module-a2/pom" );
        return false;
    }

    file = new File( basedir, "module-a3/pom.xml" );

    in = new BufferedReader( new InputStreamReader( new FileInputStream( file ), "UTF-8" ) );
    buf = new StringBuilder();
    line = in.readLine();
    while ( line != null )
    {
        buf.append( line );
        buf.append( " " );
        line = in.readLine();
    }

    p = Pattern.compile( "\\Q<parent>\\E.*\\Q<version>\\E\\s*1\\.2\\.1-SNAPSHOT\\s*\\Q</version>\\E.*\\Q</parent>\\E" );
    m = p.matcher( buf.toString() );
    if ( !m.find() )
    {
        System.out.println( "Did not update parent version in module-a3/pom" );
        return false;
    }
    p = Pattern.compile( "\\Q</parent>\\E.*\\Q<version>\\E\\s*1\\.2\\.1-SNAPSHOT\\s*\\Q</version>\\E" );
    m = p.matcher( buf.toString() );
    if ( m.find() )
    {
        System.out.println( "Did add explicit child version in module-a3/pom" );
        return false;
    }

}
catch( Throwable t )
{
    t.printStackTrace();
    return false;
}

return true;
