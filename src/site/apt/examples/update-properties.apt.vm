 ~~ Licensed to the Apache Software Foundation (ASF) under one
 ~~ or more contributor license agreements.  See the NOTICE file
 ~~ distributed with this work for additional information
 ~~ regarding copyright ownership.  The ASF licenses this file
 ~~ to you under the Apache License, Version 2.0 (the
 ~~ "License"); you may not use this file except in compliance
 ~~ with the License.  You may obtain a copy of the License at
 ~~
 ~~   http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing,
 ~~ software distributed under the License is distributed on an
 ~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~~ KIND, either express or implied.  See the License for the
 ~~ specific language governing permissions and limitations
 ~~ under the License.

 -----
 Update Properties
 -----
 Stephen Connolly
 ------
 2009-03-27
 ------

Updating Properties

  This goal is useful when you define dependency versions using properties. For example if you have a suite of projects
  and you want to ensure that you use the same version of each dependency in the suite, you might have a dependency
  section that looks like this:

---
<project>
  <properties>
    <org.junit.version>4.11</org.junit.version>
    <org.hamcrest.version>1.2</org.hamcrest.version>
    <org.springframework.version>3.2.8</org.springframework.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit</artifactId>
        <version>${org.junit.version}</version> <!-- strongly recommend this version -->
      </dependency>
      <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest-core</artifactId>
        <version>[${org.hamcrest.version}]</version> <!-- force this version -->
      </dependency>
      <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest-library</artifactId>
        <version>[${org.hamcrest.version}]</version> <!-- force this version -->
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-framework-bom</artifactId>
        <version>[${org.springframework.version},4.0.0)</version> <!-- must be less than 4.0.0 -->
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
</project>
---

Which properties are evaluated?

* Updating multiple properties

  Executing the <<<update-properties>>> goal will evaluate all properties to the latest version available to you (based
  on your reactor, local repository and all currently active remote repositories).

   * Properties not in active Profiles are not evaluated.
    * A good use of this is where alternative <release> and <development> profiles can be updated independantly.
   * Only properties which can be associated with Maven dependencies are evaluated
    * The plugin does not allow you set arbitrary properties (or to arbitrary values).

  Updates can be restricted to properties pertaining to specific dependencies by using the <<<includes>>> and
  <<<excludes>>> parameters. These parameters follow the format <<<groupId:artifactId:type:classifier>>>. Use a
  comma-separated list to specify multiple includes. Wildcards (*) can also be used to match multiple values.

---
mvn versions:update-properties -Dexcludes=internal.groupid:*,org.springframework:* -DallowSnapshots=false
mvn versions:update-properties -Dincludes=internal.groupid:* -DallowSnapshots=true
---

  Alternatively you can supply an explicit comma-separated list of names with parameter <<<includeProperties>>>:

---
mvn versions:update-properties -DincludeProperties=org.springframework.version
---

* Updating single properties

  The <<<update-property>>> goal allows a single property to be updated to a specific value (defined as a Maven version
  range). To force a specific version you must use range notation (e.g. [3.2.9])

---
mvn versions:update-property -Dproperty=org.springframework.version -DnewVersion=(,3.3)
---


Dependency associations

  By default, the plugin will scan your POM for dependencies declaring a version which depends on evaluating a single
  property that is defined in the same POM. This is controlled by the <<<autoLinkItems>>> parameter.

  If multiple dependencies use the same property to define their version (e.g. <<<org.hamcrest.version>>> in the initial
  example), then they all will be used to determine what versions are available. The property version chosen in such
  cases must be available for all associated dependencies.

  In cases where the automatic linkage cannot be determined (for example a child POM overriding a property defined in a
  parent), plugin configuration can specify the association:

---
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>versions-maven-plugin</artifactId>
  <configuration>
    <properties>
      <property>
        <name>bom.version</name>
        <autoLinkDependencies>false</autoLinkDependencies> <!-- Disable auto-link so only our config matters -->
        <dependencies>
          <dependency>
            <groupId>my.groupid</groupId>
            <artifactId>bom</artifactId> <!-- Explicitly assign association agaisnt this dependency -->
            <version>[1.0.0,2.0.0-!)</version> <!-- Must be less than 2.0.0-SNAPSHOT -->
          </dependency>
        </dependencies>
      </property>
    </properties>
  </configuration>
</plugin>
---

Version selection

  The plugin will honour any version range boundaries specified for the dependencies associated with a property.
  Inclusion of snapshots can be controlled with the <<<allowSnapshots>>> parameter as can inclusion of other reactor
  projects (<<<excludeReactor>>>).

* Property-specific versioning rules

  Some general parameters can be overridden for individual properties via the plugin's configuration

---
<plugin>
 <groupId>org.codehaus.mojo</groupId>
 <artifactId>versions-maven-plugin</artifactId>
 <configuration>
   <properties>
     <property>
       <name>some.property</name>
       <preferReactor>false</preferReactor> <!-- Stop reactor version always winning -->
       <searchReactor>false</searchReactor> <!-- Do not include reactor searching at all -->
     </property>
   </properties>
 </configuration>
</plugin>
<project>
---

