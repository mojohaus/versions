title: Providing a custom VersionsChangeRecorder
date: 2025-10-04

Providing a custom VersionsChangeRecorder
=========================================

A change recorder is a component responsible for outputting version changes. Currently, it is only being used for
recording changes for plugins that change the project. Out of the box, the following recorders are provided:

| Name | Description                                                                                                                                                                                                                                                          |
|------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| none | An "empty" recorder that will not output any changes                                                                                                                                                                                                                 |
| xml  | A recorder writing to an XML file conforming to the legacy http://www.mojohaus.org/versions-maven-plugin/schema/updates/2.0 namespace, or to the http://www.mojohaus.org/versions-maven-plugin/schema/updates/3.0 namespace if `legacy=false` is provided as options |     
| json | A recorder writing to a Json file                                                                                                                                                                                                                                    |
| csv  | A recorder writing to a CSV file                                                                                                                                                                                                                                     | 

In order to create an own VersionChangeRecorder you must implement [VersionChangeRecorder](apidocs/org/codehaus/mojo/versions/api/recording/VersionsChangeRecorder.html) interface as well as a factory
implementing [VersionChangeRecorderFactory](apidocs/org/codehaus/mojo/versions/api/recording/VersionsChangeRecorderFactory.html).

Create the recorder
------------------

The below class will create a factory instantiating an anonymous class implementing the interface.

```java
import javax.inject.Named;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.MojoExecution;
import org.codehaus.mojo.versions.api.recording.VersionChangeRecorder;
import org.codehaus.mojo.versions.api.recording.VersionChangeRecorderFactory;
import org.codehaus.mojo.versions.model.VersionChange;

@Named("my-recorder")
public class ExampleChangeRecorderFactory implements VersionChangeRecorderFactory {
    @Override
    public VersionChangeRecorder create(
            MavenSession mavenSession, MojoExecution mojoExecution, Map<String, String> ignored) {
        return new VersionChangeRecorder() {
            final List<String> versionChanges = new ArrayList<>();

            @Override
            public void recordChange(VersionChange versionChange) {
                versionChanges.add(versionChange.toString());
            }

            @Override
            public void writeReport(Path outputPath) throws IOException {
                Files.write(outputPath, versionChanges, StandardCharsets.UTF_8);
            }

            @Override
            public String getDefaultFileName() {
                return "versions-changes.log";
            }
        };
    }
}
```

As `VersionChangeRecorder` is stateful, so you must not add the `Singleton` annotation to it.

Using the custom recorder
-------------------------

Plugin configuration:

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>your.group</groupId>
  <artifactId>your-project</artifactId>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>${project.version}</version>
          <configuration>
            <!-- your component name -->
            <changeRecorderFormat>my-recorder</changeRecorderFormat>
          </configuration>
          <dependencies>
            <dependency>
              <!-- add your extension as plugin dependency -->
              <groupId>your.group</groupId>
              <artifactId>your-extension</artifactId>
              <version>ext.version</version>
            </dependency>
          </dependencies>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
```

Now execution like:

```
mvn versions:update-properties
```

will generate your custom report.
